{"mappings":"IA0BAA,EAAe,C,KA1BF,CAACC,EAAKC,KACjB,IACE,MAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,E,CAC1B,MAAOK,GACPC,QAAQD,MAAM,uBAAuBP,sBAAyBO,EAAME,Q,QAI3DT,IACX,IACE,MAAME,EAAkBG,aAAaK,QAAQV,GAC7C,OAA2B,OAApBE,OAA2BS,EAAYR,KAAKS,MAAMV,E,CACzD,MAAOK,GACPC,QAAQD,MAAM,wBAAwBP,wBAA2BO,EAAME,Q,OAI/DT,IACV,IACEK,aAAaQ,WAAWb,E,CACxB,MAAOO,GACPC,QAAQD,MAAM,yBAAyBP,yBAA4BO,EAAME,Q,ICf7E,SAASK,EAAcC,EAAaC,GAQlC,MAAMC,EAAiClB,EAAUmB,KAAKF,GAMtD,GAAKC,EAYA,CAEH,IAAIE,EAAkBF,EAA+BG,KACnDC,IAEE,MAAMC,GACJA,EAAEC,MACFA,EAAKC,KACLA,EAAIC,OACJA,EAAMC,OACNA,EAAMC,QACNA,GACEN,EAEJ,IAAIO,EAAa,yCAAyCN,+JAGhBK,6GAEPJ,sDAanC,OAXIE,IACFG,GAAc,oCAAoCH,YAEhDD,IACFI,GAAc,mCAAmCJ,YAEnDI,GAAc,wBAAwBF,yFAK/BE,CAAU,IAElBC,KAAK,IAMRd,EAAYe,mBAAmB,YAAaX,E,MAhD5CJ,EAAYe,mBACV,YACA,+E,CAkDN,SAASC,EAAehB,GACtBA,EAAYiB,UAAY,E,CC1EnB,MAEDC,EAAO,CACTC,cAAeC,SAASC,cAAc,yBACtCC,WAAYF,SAASC,cAAc,eACnCE,UAAWH,SAASC,cAAc,eAGtC5B,QAAQ+B,IAAIN,EAAKK,WACjB9B,QAAQ+B,IAAIN,EAAKI,YAkBjBvB,EAAcmB,EAAKC,cAAc,WAGjCD,EAAKK,UAAUE,iBAAiB,SAMhC,WACIP,EAAKI,WAAWI,UAAUC,OAAO,cACjCT,EAAKK,UAAUG,UAAUE,IAAI,cAC7BZ,EAAeE,EAAKC,eACpBpB,EAAcmB,EAAKC,cAAc,S,IATrCD,EAAKI,WAAWG,iBAAiB,SAYjC,WACIP,EAAKK,UAAUG,UAAUC,OAAO,cAChCT,EAAKI,WAAWI,UAAUE,IAAI,cAC9BZ,EAAeE,EAAKC,eACpBpB,EAAcmB,EAAKC,cAAc,U","sources":["src/js/common/localStrg.js","src/js/library-page/libraryRender.js","src/js/library-page/library.js"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(`Error during saving ${key} to local strage; `, error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(`Error during getting ${key} from localStorage: `, error.message);\n  }\n};\n\nconst del = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error during deleting ${key}! from localStorage: `, error.message);\n  }\n};\n\nexport default {\n  save,\n  load,\n  del,\n};\n","//importing library for working with local storage\nimport localStrg from '../common/localStrg';\n\n/*function definition for gallery rendering\nwith two parameters: 1) document element where gallery has to be created\n2) library (local storage variable) from which this gallery should be created*/\n\nfunction libraryRender(htmlElement, userLibrary) {\n\n  \n  //console.log(htmlElement);\n  \n  \n  /* getting films collection from localStorage */\n\n  const filmCollectionFromLocalStorage = localStrg.load(userLibrary);\n  \n  //console.log(\"read from localstorage\"+filmCollectionFromLocalStorage);\n  \n  /* Checking if there is collection variable in local storage */\n\n  if (!filmCollectionFromLocalStorage) {\n\n    /*if not: adding title with text \"It seems that there is no films here!\"*/\n\n    htmlElement.insertAdjacentHTML(\n      'beforeend',\n      '<div><p2 class=\"empty_text\">It seems that there is no films here!</p2></div>'\n    );\n  }\n\n  /* if collection exists, creating gallery */\n\n  else {\n    //console.log(\"local storage variable was read successfully!\");\n    let ObjectForInsert = filmCollectionFromLocalStorage.map(\n      film => {\n        //console.log(\"film: \" + film);\n        const {\n          id,\n          title,\n          year,\n          genres,\n          rating,\n          imgPath,\n        } = film;\n\n        let itemString = `<div class=\"filmoteka__item\" data-id=\"${id}\">\n        <a class=\"filmoteka__item-link\" href=\"./\">\n            <div class=\"filmoteka__item-wrapper\">\n                <img class=\"filmoteka-img\" src=\"${imgPath}\" alt=\"\" width=\"\">\n                <div class=\"overlay-text\">\n                    <h2 class=\"subtitle\">${title}</h2>\n                    <p class=\"discription\">`;\n        if (genres) {\n          itemString += `<span class=\"description__genre\">${genres}</span>`;\n        }\n        if (year) {\n          itemString += `<span class=\"description__year\">${year}</span>`;\n        }\n        itemString += `<span class=\"rating\">${rating}</span></p>\n                </div>\n            </div>\n        </a>\n        </div>`;\n        return itemString;\n      })\n      .join('');\n      \n      //console.log( \"this is object for insert: \"+ObjectForInsert+ \"In here\");\n      //console.log(\"I've done with string gathering\");\n      \n\n    htmlElement.insertAdjacentHTML('beforeend', ObjectForInsert);\n  }\n}\n/*Clear all nested elements in html element*/\nfunction libraryCleaner(htmlElement){\n  htmlElement.innerHTML = '';\n}\n\n/*boolean function to check if a film is in a library*/\nfunction isInLibrary(filmId, userLibrary) {\n  let result = false;\n  const filmCollectionFromLocalStorage = localStrg.load(userLibrary);\n\n  if (!filmCollectionFromLocalStorage) {\n    //console.log(\"checking variable existance\");\n    return result;\n  }\n\n  filmCollectionFromLocalStorage.forEach((film)=>{\n    const {id}=film; \n    if (id===filmId) { result =true }});\n  return result;\n}\n\n/*return object film from specified library, if there is no film with given id - \nfunction returns NULL*/\n\nfunction getFilmById(filmId, userLibrary) {\n  const filmLibrary = localStrg.load(userLibrary);\n  if (!filmLibrary) {\n     return null;}\n  return filmLibrary.find((film) => film.id === filmId);;\n}\n\n/*function adds film object to specified library*/\nfunction addFilm(film, userLibrary) {\n  let filmLibrary = localStrg.load(userLibrary);\n  if (!filmLibrary) {\n    localStrg.save(userLibrary, [film]);\n  }\n  filmLibrary.push(film);\n  localStrg.save(userLibrary, filmLibrary);\n}\n\n/*function removes film with specified id from specified library*/\nfunction removeFilmById(filmId, userLibrary){\n\n  if (isInLibrary(filmId, userLibrary)) {\n    let filmLibrary = localStrg.load(userLibrary);\n    filmLibrary = filmLibrary.filter((film) => film.id !== filmId);\n    localStrg.save(userLibrary, filmLibrary);\n  }\n}\n\nexport { libraryRender, libraryCleaner, getFilmById, addFilm, removeFilmById, isInLibrary};\n","//import { getPopularMovies } from \"./getPopularMovies\";\n\nimport localStrg from \"../common/localStrg\";\nimport { libraryRender, libraryCleaner, libraryCleaner, getFilmById, addFilm, removeFilmById, isInLibrary } from \"./libraryRender\";\nexport const APIKEY = \"565e4989d784811de7dff7d665000157\";\nexport const APIURL=\"https://api.themoviedb.org/\";\nconst refs = {\n    mainContainer: document.querySelector(\".filmoteka__container\"),\n    btnWatched: document.querySelector(\"#btnWatched\"),\n    btnQueued: document.querySelector(\"#btnQueued\")\n}\n\nconsole.log(refs.btnQueued);\nconsole.log(refs.btnWatched);\n\n/* for testing purpouses getting film collection and save it as\nit is library variable */\n\n\n\n/* dummyLibraryMovies();\n\nasync function dummyLibraryMovies(){\n    testQuery = await getPopularMovies(APIKEY);\n    localStrg.save(\"watched\",testQuery);\n    localStrg.save(\"queued\", testQuery);\n} */\n\n//console.log(\"I'm before library render\")\n\n/*reating gallery with films from \"watched\" library*/\nlibraryRender(refs.mainContainer,\"watched\");\n\n/* asigning events listiners to buttons: watched and queued */\nrefs.btnQueued.addEventListener('click',clickOnBtnQueuedHandler);\nrefs.btnWatched.addEventListener('click',clickOnBtnWatchedHandler);\n\n\n/* defining functions for event listiners*/\n\nfunction clickOnBtnQueuedHandler() {\n    refs.btnWatched.classList.remove(\"active-btn\");\n    refs.btnQueued.classList.add(\"active-btn\");\n    libraryCleaner(refs.mainContainer);\n    libraryRender(refs.mainContainer,\"queued\");\n}\n\nfunction clickOnBtnWatchedHandler() {\n    refs.btnQueued.classList.remove(\"active-btn\");\n    refs.btnWatched.classList.add(\"active-btn\");\n    libraryCleaner(refs.mainContainer);\n    libraryRender(refs.mainContainer,\"watched\");\n}\n\n"],"names":["$7d57122954c53380$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","removeItem","$bed364c5f49b67f0$export$af55b9989f8479c","htmlElement","userLibrary","filmCollectionFromLocalStorage","load","ObjectForInsert","map","film","id","title","year","genres","rating","imgPath","itemString","join","insertAdjacentHTML","$bed364c5f49b67f0$export$fa17ee2aad27c448","innerHTML","$5b42ae64a43be013$var$refs","mainContainer","document","querySelector","btnWatched","btnQueued","log","addEventListener","classList","remove","add"],"version":3,"file":"library.e0191ace.js.map"}