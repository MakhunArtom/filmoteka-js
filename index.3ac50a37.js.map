{"mappings":"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","sources":["src/js/getPopularMovies.js","src/js/API.js","src/js/index.js","src/js/localStrg.js","src/js/decodeGenres.js"],"sourcesContent":["import { fetchPopular } from './API';\nimport { decodeGenres } from './decodeGenres';\nimport { APIURL } from './index';\n\nexport async function getPopularMovies(APIKEY) {\n  const popularMovies = await fetchPopular(APIKEY);\n  const pageCount = popularMovies.total_pages;\n  const result = popularMovies.results;\n\n  const currentPage = await Promise.all(\n    result.map(\n      async ({\n        id,\n        title,\n        original_title,\n        name,\n        original_name,\n        overview,\n        poster_path,\n        genre_ids,\n        popularity,\n        release_date,\n        first_air_date,\n        vote_average,\n        vote_count,\n      }) => {\n        const movieTitle = title ? title : name;\n        const movieOriginalTitle = original_title\n          ? original_title\n          : original_name;\n        const movieDate = release_date ? release_date : first_air_date;\n        const imgPath = poster_path\n          ? `https://image.tmdb.org/t/p/w300` + poster_path\n          : '';\n        const genres = genre_ids ? await decodeGenres(genre_ids) : null;\n        const raitng = vote_average ? vote_average : null;\n\n        return await {\n          id: id,\n          title: movieTitle,\n          originalTitle: movieOriginalTitle,\n          year: movieDate.slice(0, 4),\n          genres: genres,\n          popularity: popularity,\n          overview: overview,\n          rating: raitng,\n          voteCount: vote_count,\n          imgPath: imgPath,\n        };\n      }\n    )\n  );\nconsole.log(currentPage);\n  return currentPage;\n}\n","import { APIURL } from \"./index\";\nimport localStrg from \"./localStrg\";\n\nexport async function fetchPopular(token){\n    return await (await fetch(APIURL+`3/trending/movie/day?api_key=${token}`)).json();\n}\n\nexport async function fetchGenresList(token){\n    const response = await (await fetch(APIURL+`3/genre/movie/list?api_key=${token}&language=en-US`)).json();\n    localStrg.save(\"genresList\",response.genres);\n    console.log(\"Genres were updated, and saved to localStorage for future\");\n    return response.genres;\n}","import { getPopularMovies } from \"./getPopularMovies\";\nimport localStrg from \"./localStrg\";\nexport const APIKEY = \"565e4989d784811de7dff7d665000157\";\nexport const APIURL=\"https://api.themoviedb.org/\";\nconst refs = {\n    mainContainer: document.querySelector(\".filmoteka__container\")\n}\n\nrenderPopularMovies();\nasync function renderPopularMovies(){\n    const currentPageContent = await getPopularMovies(APIKEY);\n    localStrg.save(\"currentPage\",currentPageContent);\n    console.log(currentPageContent);\n    \n    const markup = currentPageContent.map (({id,title,year,genres,popularity,imgPath}) => {\n        return `<div class=\"filmoteka__item\" data-id=\"${id}\">\n        <a class=\"filmoteka__item-link\" href=\"./\">\n            <div class=\"filmoteka__item-wrapper\">\n                <img class=\"filmoteka-img\" src=\"${imgPath}\" alt=\"\" width=\"395px\">\n                <div class=\"overlay-text\">\n                    <h2 class=\"subtitle\">${title}</h2>\n                    <p class=\"discription\">${genres} | ${year}</p>\n                </div>\n            </div>\n        </a>\n    </div>`\n    })\n    refs.mainContainer.insertAdjacentHTML(\"beforeend\",markup.join(\"\"))\n}\n\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(`Error during saving ${key} to local strage; `, error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(`Error during getting ${key} from localStorage: `, error.message);\n  }\n};\n\nconst del = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error during deleting ${key}! from localStorage: `, error.message);\n  }\n};\n\nexport default {\n  save,\n  load,\n  del,\n};\n","import { fetchGenresList } from \"./API\";\nimport localStrg, { save, load, del } from \"./localStrg\";\nimport { APIKEY } from \"./index\";\n\nexport async function decodeGenres(genres){\n    if (!localStrg.load (\"genresList\")){\n        await fetchGenresList(APIKEY)\n    }\n    const genresList = localStrg.load (\"genresList\");\n    let genresNames = new Array;\n    \n    genres.forEach(genre => {\n    // try to find genre in localStorage\n    try{\n        genresNames.push((genresList.find(genreListItem => genreListItem.id === genre)).name)\n    }// update localStorage ganres data and try to find one more time\n    catch(error){\n        console.log(`${genre} wasn't found in Local Storage, updating ganresList`)\n        genresList = await fetchGenresList(APIKEY);\n        genresNames.push((genresList.find(genreListItem => genreListItem.id === genre)).name)\n    }});\n\n    return(genresNames.join())\n}"],"names":["$cTOKP","parcelRequire","async","$811a776170644594$export$76bd8a7b840a3729","APIKEY","popularMovies","fetchPopular","result","total_pages","results","currentPage","Promise","all","map","id","title","original_title","name","original_name","overview","poster_path","genre_ids","popularity","release_date","first_air_date","vote_average","vote_count","movieTitle","movieOriginalTitle","movieDate","imgPath","genres","$kuM9g","decodeGenres","raitng","originalTitle","year","slice","rating","voteCount","console","log","$btpe3","$9641fdd394b90517$export$16bf2264c00353d2","token","fetch","APIURL","json","$9641fdd394b90517$export$d60bdeaf43923027","response","$7zXLT","default","save","$b5dhH","$85a5f86b715fe7db$export$8aa241ee05ce92b7","$85a5f86b715fe7db$export$39576a9723c055a0","$85a5f86b715fe7db$var$refs","mainContainer","document","querySelector","currentPageContent","getPopularMovies","markup","insertAdjacentHTML","join","$85a5f86b715fe7db$var$renderPopularMovies","$584a2aa5c4bbe395$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","message","getItem","undefined","parse","removeItem","$eebbf543936947dc$export$10c61d4a9a9ff219","load","fetchGenresList","genresList","genresNames","Array","forEach","genre","push","find","genreListItem","await"],"version":3,"file":"index.3ac50a37.js.map"}